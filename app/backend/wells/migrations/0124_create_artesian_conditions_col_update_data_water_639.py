# Generated by Django 2.2.18 on 2021-03-01 19:38

from string import Template
from django.db import migrations, models


WATER_639_USER = 'WATER-639'
UPDATE_ARTESIAN_CONDITIONS_BASE = Template("""UPDATE $table_name
    SET artesian_conditions = true,
        update_user = '$update_user',
        update_date = now()
    WHERE artesian_flow > 0 OR artesian_pressure > 0""")

UPDATE_ACTIVITY_SUBMISSION_ARTESIAN_CONDITIONS = UPDATE_ARTESIAN_CONDITIONS_BASE.substitute(table_name='activity_submission', update_user=WATER_639_USER)
UPDATE_WELL_ARTESIAN_CONDITIONS = UPDATE_ARTESIAN_CONDITIONS_BASE.substitute(table_name='well', update_user=WATER_639_USER)


class Migration(migrations.Migration):
    """
    JIRA Ticket WATER-639
        Introduce a new column named artesian_conditions, not nullable, defaults to false
        if a well/activity submission has a value > 0 for artesian_flow or artesian_pressure then
        update this new column to true for that record
    Testing locally:
        You cannot test this locally without running something manually (at least from what I can tell).
        Migrations run before fixture data is loaded, so if you blow away your docker volume and run this you'll wind up with strange issues such as all false artesian_conditions in well table where they should not be.
        To get your dev system into this state you need to open a terminal shell (bash, zsh, sh) and run: docker-compose down && docker volume rm gwells_pgdata-volume

        The best way to bypass this is to manually run the sql statements above on the well database table on your local dev.
            - Query your local dev database to obtain the number of records (SELECT COUNT(*) FROM well;) (10 total)
            - Query your local dev database to determine how many records should be affected (SELECT COUNT(*) FROM well WHERE artesian_flow > 0 OR artesian_pressure > 0;) (5 total)
            - Open a python console
            - Copy lines 7 - 15 above
            - Run them in your database, I use DataGrip so open a new console, paste, cmd+enter (5 rows affected!)
            - Double check that those are the records that should be updated have been (5 rows) = SELECT COUNT(*) FROM well WHERE artesian_conditions is true AND update_user = 'WATER-639' AND (artesian_flow > 0 OR artesian_pressure > 0);,
                and that those records that should NOT be updated are NOT (5 rows) = SELECT COUNT(*) FROM well WHERE (artesian_flow <= 0 AND artesian_pressure <= 0) OR (artesian_flow IS NULL AND artesian_pressure IS NULL);
            - Note that there are NO activity_submission records in the dev database
    """

    dependencies = [
        ('wells', '0123_retire_wells_sub_class_codes_water_1589'),
    ]

    operations = [
        migrations.AddField(
            model_name='activitysubmission',
            name='artesian_conditions',
            field=models.BooleanField(default=False, null=False, db_column='artesian_conditions',
                                      verbose_name='Artesian Conditions?', choices=[(False, 'No'), (True, 'Yes')])
        ),
        migrations.AddField(
            model_name='well',
            name='artesian_conditions',
            field=models.BooleanField(default=False, null=False, db_column='artesian_conditions',
                                      verbose_name='Artesian Conditions?', choices=[(False, 'No'), (True, 'Yes')])
        ),
        migrations.AddField(
            model_name='fieldsprovided',
            name='artesian_conditions',
            field=models.BooleanField(default=False),
        ),
        migrations.RunSQL(UPDATE_ACTIVITY_SUBMISSION_ARTESIAN_CONDITIONS),
        migrations.RunSQL(UPDATE_WELL_ARTESIAN_CONDITIONS)
    ]
