apiVersion: v1
kind: Template
metadata: {}
parameters:
  - name: SOURCE_REPOSITORY_URL
    required: true
  - name: SOURCE_REPOSITORY_REF
    required: true
  - name: NAME_SUFFIX
    required: true
  - name: NAMESPACE
    required: true
  - name: DEST_PVC_ACCESS
    required: true
  - name: DEST_PVC_CLASS
    required: true
  - name: DEST_PVC_SIZE
    required: true
  - name: SOURCE_PVC
    required: true
  - name: SCHEDULE
    value: "15 3 * * *"
    required: false
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      creationTimestamp: null
      labels:
        name: gwells-documents-backup
        component: backups
        part-of: gwells
      name: gwells-documents-backup
      namespace: "${NAMESPACE}"
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ""
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      creationTimestamp: null
      labels:
        app: "gwells-${NAME_SUFFIX}"
        name: "gwells-${NAME_SUFFIX}-documents-backup"
        component: backups
        part-of: gwells
      name: "gwells-${NAME_SUFFIX}-documents-backup"
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: gwells-documents-backup:${NAME_SUFFIX}
      postCommit: {}
      resources: {}
      source:
        contextDir: openshift/jobs/minio-backup
        git:
          ref: "${SOURCE_REPOSITORY_REF}"
          uri: "${SOURCE_REPOSITORY_URL}"
        type: Git
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: alpine:3.7
            namespace: openshift
        type: Docker
      triggers:
      - type: ConfigChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
      - kubernetes.io/pvc-protection
      labels:
        app: "gwells-${NAME_SUFFIX}"
        name: "gwells-${NAME_SUFFIX}-documents-backup"
        component: backups
        part-of: gwells
      name: "gwells-${NAME_SUFFIX}-documents-backup"
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${DEST_PVC_SIZE}
      storageClassName: ${DEST_PVC_CLASS}
  - apiVersion: batch/v1beta1
    kind: CronJob
    metadata:
      name: ${SOURCE_PVC}-backup
      namespace: "${NAMESPACE}"
    spec:
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 3
      jobTemplate:
        metadata:
          labels:
            app: "gwells-${NAME_SUFFIX}"
            name: "gwells-${NAME_SUFFIX}-documents-backup"
            component: backups
            part-of: gwells
        spec:
          backoffLimit: 10
          template:
            spec:
              activeDeadlineSeconds: 3600
              containers:
              - image: docker-registry.default.svc:5000/${NAMESPACE}/gwells-documents-backup:${NAME_SUFFIX}
                imagePullPolicy: Always
                name: minio-backup
                volumeMounts:
                - mountPath: /mnt/dest/
                  name: dest
                - mountPath: /mnt/src/
                  name: source
                  readOnly: true
              restartPolicy: OnFailure
              terminationGracePeriodSeconds: 30
              volumes:
              - name: dest
                persistentVolumeClaim:
                  claimName: "gwells-${NAME_SUFFIX}-documents-backup"
              - name: source
                persistentVolumeClaim:
                  claimName: "${SOURCE_PVC}"
      schedule: ${SCHEDULE}
      successfulJobsHistoryLimit: 3
